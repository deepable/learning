git flow
trunk-based 브랜치
전략!

팀을 리드하기 위해서는 브랜치 전략을 잘 아는 것이 중요!


gitflow 브랜치
1. main
2. develop
3. feature
4. release
5. hotfix

main에서 곧바로 모든 코드를 수정하면 안됨 대참사가 날 수 있어서
일단 develop 브랜치를 만들고 신기능 개발하기


또 거기에 신기능별로 feature1, feature2 이런 식으로 나눠서 브랜치를 운영
그거를 검토해서 develop에 병합하는 방식

그 다음에 develop 브랜치가 완성도 높게 만들어지면
임시로 release 브랜치에다가 테스트하면 됨 수정할 거 있으면 수정하고
그다음에 main에 병합해서 유저들에게 출시하면 되는 것


당연히 release에서 수정 다 한건 develop 브랜치에도 병합해서 개발을 이어나가면 됨


근데 버그가 발견되면 핫픽스를 해야 하니 main 브랜치에서
hotfix 브랜치를 만들어서 여기서 수정 후 다시 main과 develop 브랜치에 병합해주기

이것이 바로 git flow 전략..!
물론 단점도 있음
그래서 똑같이 따라하기보다 상황에 맞게 활용해야 함



git flow 말고도 간단한 전략이 바로
trunk-baseed 전략
(브랜치 하나만 잘 관리하는 전략)

이거는 그냥 main에다가 신기능 추가할 땐 그냥 feature1 브랜치 만들어서 수정하고
main에 병합하고 그다음엔 feature2 만들어서 수정 후 병합하고 이런 식으로 하면 됨

gikhub flow도 이거랑 거의 비슷한 전략임

물론 이거는 항상 많은 테스트를 자주 해줘야 함

테스트를 자동화한다던지 등의 시스템에 잘 맞음
코드가 많이 안정화되어 있으면 이런 전략 도입할 수 있뜨아



merge 방법은?

1. 기록을 남겨야 하는 중요한 branch면 3 way merge
2. 그렇지 않은 branch면 squash or rebase하면 깔끔함