git은 버전 관리 프로그램!
과거로 돌아가기 용이하고
과거 작업내용도 볼 수 있다.

git 검색해서 설치해주면 됨
1. Use visual code studio use as git's default editor
2. override the default branch name for new repository
두가지만 체크하고 나머지는 그냥 next 쭉

폴더 하나 만들고 shift+마우스 오른쪽 클릭
여기에 powershell 열기 클릭

> git config --global user.email "이메일주소"
> git config --global user.name "사용자이름"

이렇게 설정까지 해주면 설치 완료!


사용할 때는 Visual studio 터미널에서
git init 입력

이제 git이 작업 폴더를 다 감시해주는 것


코드를 작성하고 git에 기록(버전생성)하려면
>git add 파일명(app.txt)
>git commit -m '메세지'

이러면 버전 생성이 됨

수정하고 나서도 마찬가지로
>git add 파일명(app.txt)
>git commit -m '메세지'




근데 버전생성할 때 왜 귀찮게 두번 입력해야 할까?
-> 모든 파일을 굳이 기록할 필요는 없기 때문
-> 거의 안 바뀌는 이미지 파일 같은 건 기록 안 해도 됨
-> 따라서 기록할 파일을 고르고 그 기록에 대한 메세지를 남기는 것
          

   git add(스테이징) git commit   
작업폴더 -> Staging area -> repository(저장소)


근데 add랑 commit을 동시에 처리하는 명령어도 있긴 함!
이건 아직 비밀이라고 함ㅋㅋㅋㅋㅋ
초보때부터 그렇게 꿀빨면 안됨! ㅋㅋㅋㅋㅋ
궁금하면 검색해보자.

ㅇㅇ
만약 폴더에 파일이 여러개일 경우 둘 다 스테이징하려면?
> git add app.txt app2.txt
이런 식으로 하는 방법도 있고

> git add .
이렇게 하면 폴더 안의 모든 파일을 스테이징하는 코드

> git status
지금 어떤 파일들을 스테이징했는지 확인하는 코드

>git log --all --oneline
커밋한 내역을 조회하는 코드

스테이징할 때는 간단한 기능 완성 후에 한번씩 하면 됨
5초마다 할 필요 없다!

수정tnwjd

비주얼스튜디오에서는 왼쪽 메뉴 중에 소스 컨트롤로 할 수 있음!


커밋할 때는 차이점을 보고 잘 수정했다 싶으면 그때 커밋을 하는 것이 좋음

>git diff
최근 커밋과 현재 파일의 차이점을 보여줌
j/k로 스크롤바 조작
q는 종료
터미널에서는 보기가 힘들긴 함! 버그 현상도 있긴 함
따라서 diff를 사용하진 않음
ㅇㅇ
>git difftool
vim 에디터로 볼 수 있음
h j k l이 방향키
종료할 땐 :q or :qa

>git difftool 커밋해시코드(두개까지 입력 가능)
한개 입력하면 현재파일이랑 비교, 두개 입력하면 입력한 두 개 비교



근데 이런 명령어는 사실 확인하기 불편하긴 함
따라서 확장 프로그램 중에 git gragh 라는 게 있는데
그걸 설치해서 하면 됨

그럼 log 볼 수 있고 diff도 볼 수 있고 변경사항을 한 눈에 볼 수 있음


항상 코드를 수정하고 나서는 메세지를 간단 명료하게 남기는 습관을 들이자.
그래야 나도 관리가 편하고 다른 사람이 코드를 봐도 진행과정을 잘 이해할 수 있음