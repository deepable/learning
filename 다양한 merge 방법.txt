3-way
fast-forward
squash
rebase

case1. 3-way merge
개발을 하다가 branch를 새로 하나 만들어서 개발을 함
main에서도 개발함
합치려고 merge를 함
이렇게 각 신규 commit이 branch마다 있는 경우에는
두개가 합쳐진 commit이 기준 branch에 만들어짐

case2. fast forward merge
기준이 되는 main에서 따로 신규 branch를 만들어서 개발을 함
신규 branch에는 새로운 commit이 있지만,
main branch에는 새로운 commit이 없다면?
이 상황에서 main branch로 이동해서 merge를 한다면?
그냥 신규 branch의 최근 commit 내용이 main branch로 변경됨
main branch에는 변경사항이 없기 때문! 따라서 그냥 신규 branch의 내용만 변경해주면 되는 것이기 때문!

>git merge --no-ff 브랜치명
이러면 강제로 3-way merge를 할 순 있긴 함

참고로 branch를 합친다고 해서 branch가 없어지는 건 아님 계속 남아있음

>git branch -d 브랜치명
이러면 해당 branch를 삭제해 줄 수 있음
일반적으로 merge를 하고 나면 사용하지 않는 branch는 삭제를 해줌

>git branch -D 브랜치명
merge를 안 한 실수로 만든 branch 같은 건 대문자D로 해야 삭제가 됨



case3.

merge 말고 다른 방식으로도 합칠 수 있음
그것이 바로 rebase

3 way merge와 똑같은데 차이점은
main branch의 commit을 옮겨서 적용할 수 있는 것

원래 3 way merge는 main branch에서 최신 commit에서 적용되는 것

하지만 rebase는 commit을 바꿔서 적용할 수 있음

rebase를 쓰는 이유? branch 없이도 코드를 잘 짜는 고수 같음..?
실제는

branch가 100개 1000개쯤 된다면 이걸 다 3 way merge를 해버리면
log가 너무 복잡해짐
간단한 branch는 rebase하는 경우가 많음

근데 rebase는 conflict가 많이 남

merge는 중심 기준 branch로 switch 한 다음에 merge를 진행
근데 rebase는 새로운 branch로 먼저 switch한 다음
>git rebase 기준 브랜치명
그 다음 git merge 새로운 브랜치명


case4. squash and merge
조금 더 깔끔하게 merge 가능
특히 3 way merge를 많이 하다보면
log가 너무 복잡해짐

>git merge --squash 새브랜치
비주얼적인 이유, 정보전달 깔끔하게!

원하는대로 쓰면 됨
그런데 팀원들과 함께 하면 가이드라인에 따라서!


요약
3 way merge하면 나중에 로그가 복잡해짐
fast forward merge는 어짜피 최근 커밋이 메인브랜치로 되는 거니 상관 없음
rebase나 squash를 해주면 log가 깔끔해짐 단 충돌 관리 잘 해야 함

혼자 개발할 때는 상관 없지만 팀원이 있거나 어디 회사에 소속되어서
작업할 경우는 가이드라인에 따라야 함
내가 직접 가이드라인을 만들 수도 있을 듯!